{"version":3,"sources":["timer.js","App.js","serviceWorker.js","index.js"],"names":["GAME_TIME_IN_SECS","Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handlePlayPause","setState","playing","state","_handleReset","secsRemaining","audio4","Audio","audio2","audio1","audioHalf","audioFinal","setInterval","play","react_default","a","createElement","className","Math","floor","onClick","Component","App","timer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ae599e1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst GAME_TIME_IN_SECS = 242\n\nclass Timer extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        secsRemaining: GAME_TIME_IN_SECS,\n        playing: false,\n      };\n\n\n      let audio4 = new Audio('audio/4minutes.mp3')\n      let audio2 = new Audio('audio/2minutes.mp3')\n      let audio1 = new Audio('audio/1minute.mp3')\n      let audioHalf = new Audio('audio/30seconds.mp3')\n      let audioFinal = new Audio('audio/final.mp3')\n      \n  \n      // Countdown\n      setInterval(() => {\n        if (this.state.playing) {\n          this.setState({ secsRemaining: this.state.secsRemaining - 1 | 0 });\n          if(this.state.secsRemaining === 0){\n            this.setState({ playing: false });\n            this.setState({ secsRemaining: GAME_TIME_IN_SECS });\n          }else if(this.state.secsRemaining === 240){\n            audio4.play()\n          }else if(this.state.secsRemaining === 120){\n            audio2.play()\n          }else if(this.state.secsRemaining === 60){\n            audio1.play()\n          }else if(this.state.secsRemaining === 30){\n            audioHalf.play()\n          }else if(this.state.secsRemaining === 10){\n            audioFinal.play()\n          }\n        }\n      }, 1000);\n    }\n  \n    _handlePlayPause = () => {\n      this.setState({ playing: !this.state.playing });\n    };\n  \n    _handleReset = () => {\n      this.setState({ playing: false, secsRemaining: GAME_TIME_IN_SECS });\n    };\n  \n  \n    render() {\n      return (\n        <div className='appTimerContainer'>\n          <div className='appTimer'>\n            {Math.floor(this.state.secsRemaining / 60)}\n            :\n            {Math.floor(this.state.secsRemaining % 60) >= 10\n              ? Math.floor(this.state.secsRemaining % 60)\n              : '0' + Math.floor(this.state.secsRemaining % 60)}\n          </div>\n          <div className='timerButtonsContainer'>\n            <div className='timerControlButton' onClick={this._handlePlayPause}>{this.state.playing ? \"Pause\":\"Play\"}</div>\n            <div className='timerControlButton' onClick={this._handleReset}>Reset</div>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Timer","import React, { Component } from 'react';\nimport Timer from './timer'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"appTitle\">\n          La Hora Cu√°drala\n        </div>\n        <Timer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}